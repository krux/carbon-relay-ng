commit deeda7bed8a0ad40b9d58338c87f0f4e33ea7cf5
Author: Dieter Plaetinck <dieter@vimeo.com>
Date:   Wed Mar 18 14:49:35 2015 -0400

    add Inc()/Dec() convenience functions to Gauge and GaugeFloat64.

diff --git a/gauge.go b/gauge.go
index 807638a..a4ed74b 100644
--- a/gauge.go
+++ b/gauge.go
@@ -4,6 +4,8 @@ import "sync/atomic"
 
 // Gauges hold an int64 value that can be set arbitrarily.
 type Gauge interface {
+	Dec(int64)
+	Inc(int64)
 	Snapshot() Gauge
 	Update(int64)
 	Value() int64
@@ -39,6 +41,16 @@ func NewRegisteredGauge(name string, r Registry) Gauge {
 // GaugeSnapshot is a read-only copy of another Gauge.
 type GaugeSnapshot int64
 
+// Dec panics.
+func (GaugeSnapshot) Dec(int64) {
+	panic("Dec called on a GaugeSnapshot")
+}
+
+// Inc panics.
+func (GaugeSnapshot) Inc(int64) {
+	panic("Inc called on a GaugeSnapshot")
+}
+
 // Snapshot returns the snapshot.
 func (g GaugeSnapshot) Snapshot() Gauge { return g }
 
@@ -53,6 +65,12 @@ func (g GaugeSnapshot) Value() int64 { return int64(g) }
 // NilGauge is a no-op Gauge.
 type NilGauge struct{}
 
+// Dec is a no-op.
+func (NilGauge) Dec(i int64) {}
+
+// Inc is a no-op.
+func (NilGauge) Inc(i int64) {}
+
 // Snapshot is a no-op.
 func (NilGauge) Snapshot() Gauge { return NilGauge{} }
 
@@ -68,6 +86,16 @@ type StandardGauge struct {
 	value int64
 }
 
+// Dec decrements the gauge by the given amount.
+func (g *StandardGauge) Dec(i int64) {
+	atomic.AddInt64(&g.value, -i)
+}
+
+// Inc increments the gauge by the given amount.
+func (g *StandardGauge) Inc(i int64) {
+	atomic.AddInt64(&g.value, i)
+}
+
 // Snapshot returns a read-only copy of the gauge.
 func (g *StandardGauge) Snapshot() Gauge {
 	return GaugeSnapshot(g.Value())
diff --git a/gauge_float64.go b/gauge_float64.go
index 47c3566..95990ca 100644
--- a/gauge_float64.go
+++ b/gauge_float64.go
@@ -4,6 +4,8 @@ import "sync"
 
 // GaugeFloat64s hold a float64 value that can be set arbitrarily.
 type GaugeFloat64 interface {
+	Dec(float64)
+	Inc(float64)
 	Snapshot() GaugeFloat64
 	Update(float64)
 	Value() float64
@@ -41,6 +43,16 @@ func NewRegisteredGaugeFloat64(name string, r Registry) GaugeFloat64 {
 // GaugeFloat64Snapshot is a read-only copy of another GaugeFloat64.
 type GaugeFloat64Snapshot float64
 
+// Dec panics.
+func (GaugeFloat64Snapshot) Dec(float64) {
+	panic("Dec called on a GaugeSnapshot")
+}
+
+// Inc panics.
+func (GaugeFloat64Snapshot) Inc(float64) {
+	panic("Inc called on a GaugeSnapshot")
+}
+
 // Snapshot returns the snapshot.
 func (g GaugeFloat64Snapshot) Snapshot() GaugeFloat64 { return g }
 
@@ -55,6 +67,12 @@ func (g GaugeFloat64Snapshot) Value() float64 { return float64(g) }
 // NilGauge is a no-op Gauge.
 type NilGaugeFloat64 struct{}
 
+// Dec is a no-op.
+func (NilGaugeFloat64) Dec(i float64) {}
+
+// Inc is a no-op.
+func (NilGaugeFloat64) Inc(i float64) {}
+
 // Snapshot is a no-op.
 func (NilGaugeFloat64) Snapshot() GaugeFloat64 { return NilGaugeFloat64{} }
 
@@ -71,6 +89,20 @@ type StandardGaugeFloat64 struct {
 	value float64
 }
 
+// Dec decrements the gauge by the given amount.
+func (g *StandardGaugeFloat64) Dec(i float64) {
+	g.mutex.Lock()
+	defer g.mutex.Unlock()
+	g.value -= i
+}
+
+// Inc increments the gauge by the given amount.
+func (g *StandardGaugeFloat64) Inc(i float64) {
+	g.mutex.Lock()
+	defer g.mutex.Unlock()
+	g.value += i
+}
+
 // Snapshot returns a read-only copy of the gauge.
 func (g *StandardGaugeFloat64) Snapshot() GaugeFloat64 {
 	return GaugeFloat64Snapshot(g.Value())
